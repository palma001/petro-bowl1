{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "Swagger Map",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "192.168.10.50:3000",
  "basePath": "",
  "tags": [
    {
      "name": "Users",
      "description": "Operations about users",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://192.168.10.50:3000"
      }
    },
    {
      "name": "Events",
      "description": "Operations about events",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://192.168.10.50:3000"
      }
    },
    {
      "name": "Teams",
      "description": "Operations about teams",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://192.168.10.50:3000"
      }
    },
    {
      "name": "Competitors",
      "description": "Operations about competitors",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://192.168.10.50:3000"
      }
    },
    {
      "name": "Questions",
      "description": "Operations about events",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://192.168.10.50:3000"
      }
    },
    {
      "name": "Confrontation",
      "description": "Operations about confrontation",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://192.168.10.50:3000"
      }
    },
    {
      "name": "QuestionRound",
      "description": "Operations about question round",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://192.168.10.50:3000"
      }
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "login",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authorization"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all user",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Get users",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/{usersId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get one user",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {
            "name": "usersId",
            "in": "path",
            "description": "Identifer users",
            "type": "integer",
            "format": "int64"
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user by Users name",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {
            "name": "usersId",
            "in": "path",
            "description": "Identifer users",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/users"
            }
          }  
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user by userId",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {
            "name": "usersId",
            "in": "path",
            "description": "Identifer events",
            "type": "integer",
            "format": "int64"
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ]
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get user by user name",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Create events",
        "description": "Create Events to petro-bowl",
        "operationId": "createEvents",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/events"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "event not found"
          }
        }
      }
    },
    "/events/{eventId}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get user by user name",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Identifer events",
            "type": "integer",
            "format": "int64"
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "Events"
        ],
        "summary": "Update user by event name",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Identifer events",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/events"
            }
          }  
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Delete event by eventId",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Identifer events",
            "type": "integer",
            "format": "int64"
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Events"
        ]
      }
    },
    "/teams": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get Teams ",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [

          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "teams not found"
          }
        }
      },
      "post": {
        "tags": [
          "Teams"
        ],
        "summary": " Create Teams ",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/teams"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "teams not found"
          }
        }
      }
    },
    "/teams/{teamId}": {
      "get": {
        "tags": [
          "Teams"
        ],
        "summary": "Get Teams by TeamsId ",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Identifer teams",
            "type": "integer",
            "format": "int64"
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "teams not found"
          }
        }
      },
      "put": {
        "tags": [
          "Teams"
        ],
        "summary": "Update by Identifer events and teams",
        "description": "",
        "produces":[
          "application/json"],
        "parameters":[
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {"name": "teamId",
            "in": "path",
            "description": "Identifer teams",
            "type": "integer",
            "format": "int64"
          },
          {"name": "body",
            "in": "body",
            "description": "Identifer teams",
            "required": true,
            "schema":{
              "$ref": "#/definitions/teams"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "teams not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Teams"
        ],
        "summary": "delete Teams ",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Identifer teams",
            "type": "integer",
            "format": "int64"
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "teams not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Teams"
        ]
      }
    },
    "/teams/{teamId}/competitors": {
      "get": {
        "tags": [
          "Competitors"
        ],
        "summary": "Get Competitors by TeamsId ",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {
            "name": "teamId",
            "in": "path",
            "description": "Identifer teams",
            "type": "integer",
            "format": "int64"
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "204": {
            "description": "successful operation"
          },
          "404": {
            "description": "teams not found"
          }
        }
      },
      "post": {
        "tags": [
          "Competitors"
        ]
      }
    },
    "/teams/{teamId}/competitors/{competitorsId}": {
      "get": {
        "tags": [
          "Competitors"
        ]
      },
      "put": {
        "tags": [
          "Competitors"
        ]
      },
      "delete": {
        "tags": [
          "Competitors"
        ]
      },
      "patch": {
        "tags": [
          "Competitors"
        ]
      }
    },
    "/questions": {
      "get": {
        "tags": [
          "Questions"
        ]
      },
      "post": {
        "tags": [
          "Questions"
        ]
      }
    },
    "/questions/{questionId}": {
      "get": {
        "tags": [
          "Questions"
        ]
      },
      "put": {
        "tags": [
          "Questions"
        ]
      },
      "delete": {
        "tags": [
          "Questions"
        ]
      },
      "patch": {
        "tags": [
          "Questions"
        ]
      }
    },
    "/events/{eventId}/{phaseId}/confrontation": {
      "get": {
        "tags": [
          "Confrontation"
        ],
        "summary": "Get all Confrontation",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "phaseId",
            "in": "path",
            "description": "",
            "type": "integer",
            "format": "int64"
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Confrontations not found"
          }
        }
      },
      "post": {
        "tags": [
          "Confrontation"
        ],
        "summary": "Create confrontation",
        "description": "Create confrontation to petro-bowl",
        "operationId": "createConfrontation",
        "produces": [
          "application/json"
        ],
        "parameters": [
           {
            "name": "eventId",
            "in": "path",
            "description": "",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "phaseId",
            "in": "path",
            "description": "",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "description": "Created confrontation object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/confrontation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "event not found"
          }
        }
      }
      
    },
    "/events/{eventId}/{phaseId}/confrontation/{confrontationId}": {
      "get": {
        "tags": [
          "Confrontation"
        ]
      },
      "put": {
        "tags": [
          "Confrontation"
        ]
      },
      "delete": {
        "tags": [
          "Confrontation"
        ]
      },
      "patch": {
        "tags": [
          "Confrontation"
        ]
      }
    },
    "/confrontation/{confrontationId}/question-round/": {
      "get": {
        "tags": [
          "QuestionRound"
        ],
        "summary": "Get all user",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {
            "name": "confrontationId",
            "in": "path",
            "description": "header token",
            "type": "string"
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "post": {
        "tags": [
          "QuestionRound"
        ],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "description": "header token",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/questionRound"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/confrontation/{confrontationId}/question-round/{questionRoundId}": {
      "get": {
        "tags": [
          "QuestionRound"
        ],
        "summary": "Get find by confrontationId and questionRoundId",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "confrontationId",
            "in": "path",
            "description": "Identifer confrontation",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "questionRoundId",
            "in": "path",
            "description": "Identifer questionRound",
            "type": "integer",
            "format": "int64"
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "QuestionRound"
        ],
        "summary": "Update user by event name",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "confrontationId",
            "in": "path",
            "description": "Identifer confrontation",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "questionRoundId",
            "in": "path",
            "description": "Identifer questionRound",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created questions Round",
            "required": true,
            "schema": {
              "$ref": "#/definitions/questionRound"
            }
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "QuestionRound"
        ],
        "summary": "Delete question-round by questionRoundId",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "confrontationId",
            "in": "path",
            "description": "Identifer confrontation",
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "questionRoundId",
            "in": "path",
            "description": "Identifer questionRound",
            "type": "integer",
            "format": "int64"
          }
        ], 
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }  
      },
      "patch": {
        "tags": [
          "QuestionRound"
        ]
      }
    }
  },
  "definitions": {
    "authorization": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "required": true
        },
        "password": {
          "type": "string",
          "required": true
        }
      }
    },
    "users": {
      "type": "object",
      "properties": {
        
        "eventId": {
          "type": "integer",
          "required": true
        },
        "name": {
          "type": "string",
          "required": true
        },
        "lastname": {
          "type": "string",
          "required": true
        },
        "rols": {
          "type": "string",
          "required": true
        },
        "email": {
          "type": "string",
          "required": true
        },
        "user": {
          "type": "string",
          "required": true
        },
        "password": {
          "type": "string",
          "required": true
        }
      }
    },
    "events":{
      "type": "object",
      "properties": {
        
        "name": {
          "type": "string",
          "required": true
        },

        "organizer": {
          "type": "string",
          "required": true
        },

        "address": {
          "type": "string",
          "required": true
        },

        "dateEvent": {
          "type": "Date",
          "required": true,
          "example": "2018/01/30 23:30:14"
        },

        "created_by": {
          "type": "string",
          "required": true
        },

        "updated_by": {
          "type": "string",
          "required": true
        }
      }
    },
    "questionRound": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "required": true
        },
        "confrontationId": {
          "type": "integer",
          "required": true
        },
        "questionId": {
          "type": "integer",
          "required": true

        },
        "teamA": {
          "type": "integer",
          "required": true

        },
        "teamB": {
          "type": "integer",
          "required": true

        },
        "scoreA": {
          "type": "string",
          "required": true

        },
        "scoreB": {
          "type": "string",
          "required": true

        },
        "created_by": {
          "type": "string",
          "required": true
        },
    
        "updated_by": {
          "type": "string",
          "required": true

        }


      } 
    },
    "teams":{
      "type": "object",
      "properties":{
              
        "name": {
          "type": "string",
          "required": true
        },
      
        "university": {
          "type": "string",
          "required": true
        },

        "created_by": {
          "type": "string",
          "required": true
        },
    
        "updated_by": {
          "type": "string",
          "required": true
        }
      }
    },
    "confrontation": {
      "type": "object",
      "properties":{
        "id": {
          "type": "integer",
          "required": true          
        },

        "phaseId": {
          "type": "integer",
          "required": true
        },
        "teamA": {
          "type": "integer",
          "required": true
        },
        "teamB": {
          "type": "integer",
          "required": true
        },
        "created_by": {
          "type": "string",
          "required": true
        },
    
        "updated_by": {
          "type": "string",
          "required": true
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
